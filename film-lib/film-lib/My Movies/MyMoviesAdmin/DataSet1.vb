'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.209
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableMovie As MovieDataTable
    
    Private tableVideo As VideoDataTable
    
    Private tableActor As ActorDataTable
    
    Private tableDirector As DirectorDataTable
    
    Private tableProducer As ProducerDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Movie")) Is Nothing) Then
                Me.Tables.Add(New MovieDataTable(ds.Tables("Movie")))
            End If
            If (Not (ds.Tables("Video")) Is Nothing) Then
                Me.Tables.Add(New VideoDataTable(ds.Tables("Video")))
            End If
            If (Not (ds.Tables("Actor")) Is Nothing) Then
                Me.Tables.Add(New ActorDataTable(ds.Tables("Actor")))
            End If
            If (Not (ds.Tables("Director")) Is Nothing) Then
                Me.Tables.Add(New DirectorDataTable(ds.Tables("Director")))
            End If
            If (Not (ds.Tables("Producer")) Is Nothing) Then
                Me.Tables.Add(New ProducerDataTable(ds.Tables("Producer")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Movie As MovieDataTable
        Get
            Return Me.tableMovie
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Video As VideoDataTable
        Get
            Return Me.tableVideo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Actor As ActorDataTable
        Get
            Return Me.tableActor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Director As DirectorDataTable
        Get
            Return Me.tableDirector
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Producer As ProducerDataTable
        Get
            Return Me.tableProducer
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Movie")) Is Nothing) Then
            Me.Tables.Add(New MovieDataTable(ds.Tables("Movie")))
        End If
        If (Not (ds.Tables("Video")) Is Nothing) Then
            Me.Tables.Add(New VideoDataTable(ds.Tables("Video")))
        End If
        If (Not (ds.Tables("Actor")) Is Nothing) Then
            Me.Tables.Add(New ActorDataTable(ds.Tables("Actor")))
        End If
        If (Not (ds.Tables("Director")) Is Nothing) Then
            Me.Tables.Add(New DirectorDataTable(ds.Tables("Director")))
        End If
        If (Not (ds.Tables("Producer")) Is Nothing) Then
            Me.Tables.Add(New ProducerDataTable(ds.Tables("Producer")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMovie = CType(Me.Tables("Movie"),MovieDataTable)
        If (Not (Me.tableMovie) Is Nothing) Then
            Me.tableMovie.InitVars
        End If
        Me.tableVideo = CType(Me.Tables("Video"),VideoDataTable)
        If (Not (Me.tableVideo) Is Nothing) Then
            Me.tableVideo.InitVars
        End If
        Me.tableActor = CType(Me.Tables("Actor"),ActorDataTable)
        If (Not (Me.tableActor) Is Nothing) Then
            Me.tableActor.InitVars
        End If
        Me.tableDirector = CType(Me.Tables("Director"),DirectorDataTable)
        If (Not (Me.tableDirector) Is Nothing) Then
            Me.tableDirector.InitVars
        End If
        Me.tableProducer = CType(Me.Tables("Producer"),ProducerDataTable)
        If (Not (Me.tableProducer) Is Nothing) Then
            Me.tableProducer.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMovie = New MovieDataTable
        Me.Tables.Add(Me.tableMovie)
        Me.tableVideo = New VideoDataTable
        Me.Tables.Add(Me.tableVideo)
        Me.tableActor = New ActorDataTable
        Me.Tables.Add(Me.tableActor)
        Me.tableDirector = New DirectorDataTable
        Me.Tables.Add(Me.tableDirector)
        Me.tableProducer = New ProducerDataTable
        Me.Tables.Add(Me.tableProducer)
    End Sub
    
    Private Function ShouldSerializeMovie() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVideo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeActor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDirector() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProducer() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MovieRowChangeEventHandler(ByVal sender As Object, ByVal e As MovieRowChangeEvent)
    
    Public Delegate Sub VideoRowChangeEventHandler(ByVal sender As Object, ByVal e As VideoRowChangeEvent)
    
    Public Delegate Sub ActorRowChangeEventHandler(ByVal sender As Object, ByVal e As ActorRowChangeEvent)
    
    Public Delegate Sub DirectorRowChangeEventHandler(ByVal sender As Object, ByVal e As DirectorRowChangeEvent)
    
    Public Delegate Sub ProducerRowChangeEventHandler(ByVal sender As Object, ByVal e As ProducerRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MovieDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCategory As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnDirID As DataColumn
        
        Private columnDuration As DataColumn
        
        Private columnMovID As DataColumn
        
        Private columnMovTitle As DataColumn
        
        Private columnProdID As DataColumn
        
        Private columnReleaseYear As DataColumn
        
        Friend Sub New()
            MyBase.New("Movie")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CategoryColumn As DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property DirIDColumn As DataColumn
            Get
                Return Me.columnDirID
            End Get
        End Property
        
        Friend ReadOnly Property DurationColumn As DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        Friend ReadOnly Property MovIDColumn As DataColumn
            Get
                Return Me.columnMovID
            End Get
        End Property
        
        Friend ReadOnly Property MovTitleColumn As DataColumn
            Get
                Return Me.columnMovTitle
            End Get
        End Property
        
        Friend ReadOnly Property ProdIDColumn As DataColumn
            Get
                Return Me.columnProdID
            End Get
        End Property
        
        Friend ReadOnly Property ReleaseYearColumn As DataColumn
            Get
                Return Me.columnReleaseYear
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MovieRow
            Get
                Return CType(Me.Rows(index),MovieRow)
            End Get
        End Property
        
        Public Event MovieRowChanged As MovieRowChangeEventHandler
        
        Public Event MovieRowChanging As MovieRowChangeEventHandler
        
        Public Event MovieRowDeleted As MovieRowChangeEventHandler
        
        Public Event MovieRowDeleting As MovieRowChangeEventHandler
        
        Public Overloads Sub AddMovieRow(ByVal row As MovieRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMovieRow(ByVal Category As String, ByVal Description As String, ByVal DirID As Short, ByVal Duration As String, ByVal MovTitle As String, ByVal ProdID As Short, ByVal ReleaseYear As Short) As MovieRow
            Dim rowMovieRow As MovieRow = CType(Me.NewRow,MovieRow)
            rowMovieRow.ItemArray = New Object() {Category, Description, DirID, Duration, Nothing, MovTitle, ProdID, ReleaseYear}
            Me.Rows.Add(rowMovieRow)
            Return rowMovieRow
        End Function
        
        Public Function FindByMovID(ByVal MovID As Integer) As MovieRow
            Return CType(Me.Rows.Find(New Object() {MovID}),MovieRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MovieDataTable = CType(MyBase.Clone,MovieDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MovieDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCategory = Me.Columns("Category")
            Me.columnDescription = Me.Columns("Description")
            Me.columnDirID = Me.Columns("DirID")
            Me.columnDuration = Me.Columns("Duration")
            Me.columnMovID = Me.Columns("MovID")
            Me.columnMovTitle = Me.Columns("MovTitle")
            Me.columnProdID = Me.Columns("ProdID")
            Me.columnReleaseYear = Me.Columns("ReleaseYear")
        End Sub
        
        Private Sub InitClass()
            Me.columnCategory = New DataColumn("Category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategory)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnDirID = New DataColumn("DirID", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDirID)
            Me.columnDuration = New DataColumn("Duration", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuration)
            Me.columnMovID = New DataColumn("MovID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMovID)
            Me.columnMovTitle = New DataColumn("MovTitle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMovTitle)
            Me.columnProdID = New DataColumn("ProdID", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProdID)
            Me.columnReleaseYear = New DataColumn("ReleaseYear", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReleaseYear)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMovID}, true))
            Me.columnMovID.AutoIncrement = true
            Me.columnMovID.AllowDBNull = false
            Me.columnMovID.Unique = true
        End Sub
        
        Public Function NewMovieRow() As MovieRow
            Return CType(Me.NewRow,MovieRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MovieRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MovieRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MovieRowChangedEvent) Is Nothing) Then
                RaiseEvent MovieRowChanged(Me, New MovieRowChangeEvent(CType(e.Row,MovieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MovieRowChangingEvent) Is Nothing) Then
                RaiseEvent MovieRowChanging(Me, New MovieRowChangeEvent(CType(e.Row,MovieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MovieRowDeletedEvent) Is Nothing) Then
                RaiseEvent MovieRowDeleted(Me, New MovieRowChangeEvent(CType(e.Row,MovieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MovieRowDeletingEvent) Is Nothing) Then
                RaiseEvent MovieRowDeleting(Me, New MovieRowChangeEvent(CType(e.Row,MovieRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMovieRow(ByVal row As MovieRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MovieRow
        Inherits DataRow
        
        Private tableMovie As MovieDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMovie = CType(Me.Table,MovieDataTable)
        End Sub
        
        Public Property Category As String
            Get
                Try 
                    Return CType(Me(Me.tableMovie.CategoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMovie.CategoryColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableMovie.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMovie.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property DirID As Short
            Get
                Try 
                    Return CType(Me(Me.tableMovie.DirIDColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMovie.DirIDColumn) = value
            End Set
        End Property
        
        Public Property Duration As String
            Get
                Try 
                    Return CType(Me(Me.tableMovie.DurationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMovie.DurationColumn) = value
            End Set
        End Property
        
        Public Property MovID As Integer
            Get
                Return CType(Me(Me.tableMovie.MovIDColumn),Integer)
            End Get
            Set
                Me(Me.tableMovie.MovIDColumn) = value
            End Set
        End Property
        
        Public Property MovTitle As String
            Get
                Try 
                    Return CType(Me(Me.tableMovie.MovTitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMovie.MovTitleColumn) = value
            End Set
        End Property
        
        Public Property ProdID As Short
            Get
                Try 
                    Return CType(Me(Me.tableMovie.ProdIDColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMovie.ProdIDColumn) = value
            End Set
        End Property
        
        Public Property ReleaseYear As Short
            Get
                Try 
                    Return CType(Me(Me.tableMovie.ReleaseYearColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMovie.ReleaseYearColumn) = value
            End Set
        End Property
        
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tableMovie.CategoryColumn)
        End Function
        
        Public Sub SetCategoryNull()
            Me(Me.tableMovie.CategoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableMovie.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableMovie.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDirIDNull() As Boolean
            Return Me.IsNull(Me.tableMovie.DirIDColumn)
        End Function
        
        Public Sub SetDirIDNull()
            Me(Me.tableMovie.DirIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDurationNull() As Boolean
            Return Me.IsNull(Me.tableMovie.DurationColumn)
        End Function
        
        Public Sub SetDurationNull()
            Me(Me.tableMovie.DurationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMovTitleNull() As Boolean
            Return Me.IsNull(Me.tableMovie.MovTitleColumn)
        End Function
        
        Public Sub SetMovTitleNull()
            Me(Me.tableMovie.MovTitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProdIDNull() As Boolean
            Return Me.IsNull(Me.tableMovie.ProdIDColumn)
        End Function
        
        Public Sub SetProdIDNull()
            Me(Me.tableMovie.ProdIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReleaseYearNull() As Boolean
            Return Me.IsNull(Me.tableMovie.ReleaseYearColumn)
        End Function
        
        Public Sub SetReleaseYearNull()
            Me(Me.tableMovie.ReleaseYearColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MovieRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MovieRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MovieRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MovieRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VideoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFormat As DataColumn
        
        Private columnMovID As DataColumn
        
        Private columnPrice As DataColumn
        
        Private columnVideoID As DataColumn
        
        Friend Sub New()
            MyBase.New("Video")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FormatColumn As DataColumn
            Get
                Return Me.columnFormat
            End Get
        End Property
        
        Friend ReadOnly Property MovIDColumn As DataColumn
            Get
                Return Me.columnMovID
            End Get
        End Property
        
        Friend ReadOnly Property PriceColumn As DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        Friend ReadOnly Property VideoIDColumn As DataColumn
            Get
                Return Me.columnVideoID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VideoRow
            Get
                Return CType(Me.Rows(index),VideoRow)
            End Get
        End Property
        
        Public Event VideoRowChanged As VideoRowChangeEventHandler
        
        Public Event VideoRowChanging As VideoRowChangeEventHandler
        
        Public Event VideoRowDeleted As VideoRowChangeEventHandler
        
        Public Event VideoRowDeleting As VideoRowChangeEventHandler
        
        Public Overloads Sub AddVideoRow(ByVal row As VideoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVideoRow(ByVal Format As String, ByVal MovID As Short, ByVal Price As Decimal) As VideoRow
            Dim rowVideoRow As VideoRow = CType(Me.NewRow,VideoRow)
            rowVideoRow.ItemArray = New Object() {Format, MovID, Price, Nothing}
            Me.Rows.Add(rowVideoRow)
            Return rowVideoRow
        End Function
        
        Public Function FindByVideoID(ByVal VideoID As Integer) As VideoRow
            Return CType(Me.Rows.Find(New Object() {VideoID}),VideoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VideoDataTable = CType(MyBase.Clone,VideoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VideoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFormat = Me.Columns("Format")
            Me.columnMovID = Me.Columns("MovID")
            Me.columnPrice = Me.Columns("Price")
            Me.columnVideoID = Me.Columns("VideoID")
        End Sub
        
        Private Sub InitClass()
            Me.columnFormat = New DataColumn("Format", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormat)
            Me.columnMovID = New DataColumn("MovID", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMovID)
            Me.columnPrice = New DataColumn("Price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice)
            Me.columnVideoID = New DataColumn("VideoID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVideoID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnVideoID}, true))
            Me.columnVideoID.AutoIncrement = true
            Me.columnVideoID.AllowDBNull = false
            Me.columnVideoID.Unique = true
        End Sub
        
        Public Function NewVideoRow() As VideoRow
            Return CType(Me.NewRow,VideoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VideoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VideoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VideoRowChangedEvent) Is Nothing) Then
                RaiseEvent VideoRowChanged(Me, New VideoRowChangeEvent(CType(e.Row,VideoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VideoRowChangingEvent) Is Nothing) Then
                RaiseEvent VideoRowChanging(Me, New VideoRowChangeEvent(CType(e.Row,VideoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VideoRowDeletedEvent) Is Nothing) Then
                RaiseEvent VideoRowDeleted(Me, New VideoRowChangeEvent(CType(e.Row,VideoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VideoRowDeletingEvent) Is Nothing) Then
                RaiseEvent VideoRowDeleting(Me, New VideoRowChangeEvent(CType(e.Row,VideoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVideoRow(ByVal row As VideoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VideoRow
        Inherits DataRow
        
        Private tableVideo As VideoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVideo = CType(Me.Table,VideoDataTable)
        End Sub
        
        Public Property Format As String
            Get
                Try 
                    Return CType(Me(Me.tableVideo.FormatColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVideo.FormatColumn) = value
            End Set
        End Property
        
        Public Property MovID As Short
            Get
                Try 
                    Return CType(Me(Me.tableVideo.MovIDColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVideo.MovIDColumn) = value
            End Set
        End Property
        
        Public Property Price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVideo.PriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVideo.PriceColumn) = value
            End Set
        End Property
        
        Public Property VideoID As Integer
            Get
                Return CType(Me(Me.tableVideo.VideoIDColumn),Integer)
            End Get
            Set
                Me(Me.tableVideo.VideoIDColumn) = value
            End Set
        End Property
        
        Public Function IsFormatNull() As Boolean
            Return Me.IsNull(Me.tableVideo.FormatColumn)
        End Function
        
        Public Sub SetFormatNull()
            Me(Me.tableVideo.FormatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMovIDNull() As Boolean
            Return Me.IsNull(Me.tableVideo.MovIDColumn)
        End Function
        
        Public Sub SetMovIDNull()
            Me(Me.tableVideo.MovIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableVideo.PriceColumn)
        End Function
        
        Public Sub SetPriceNull()
            Me(Me.tableVideo.PriceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VideoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VideoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VideoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VideoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ActorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnActorID As DataColumn
        
        Private columnBackground As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnLastName As DataColumn
        
        Friend Sub New()
            MyBase.New("Actor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ActorIDColumn As DataColumn
            Get
                Return Me.columnActorID
            End Get
        End Property
        
        Friend ReadOnly Property BackgroundColumn As DataColumn
            Get
                Return Me.columnBackground
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property LastNameColumn As DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ActorRow
            Get
                Return CType(Me.Rows(index),ActorRow)
            End Get
        End Property
        
        Public Event ActorRowChanged As ActorRowChangeEventHandler
        
        Public Event ActorRowChanging As ActorRowChangeEventHandler
        
        Public Event ActorRowDeleted As ActorRowChangeEventHandler
        
        Public Event ActorRowDeleting As ActorRowChangeEventHandler
        
        Public Overloads Sub AddActorRow(ByVal row As ActorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddActorRow(ByVal Background As String, ByVal DOB As Date, ByVal FirstName As String, ByVal LastName As String) As ActorRow
            Dim rowActorRow As ActorRow = CType(Me.NewRow,ActorRow)
            rowActorRow.ItemArray = New Object() {Nothing, Background, DOB, FirstName, LastName}
            Me.Rows.Add(rowActorRow)
            Return rowActorRow
        End Function
        
        Public Function FindByActorID(ByVal ActorID As Integer) As ActorRow
            Return CType(Me.Rows.Find(New Object() {ActorID}),ActorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ActorDataTable = CType(MyBase.Clone,ActorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ActorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnActorID = Me.Columns("ActorID")
            Me.columnBackground = Me.Columns("Background")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnLastName = Me.Columns("LastName")
        End Sub
        
        Private Sub InitClass()
            Me.columnActorID = New DataColumn("ActorID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActorID)
            Me.columnBackground = New DataColumn("Background", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBackground)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New DataColumn("LastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastName)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnActorID}, true))
            Me.columnActorID.AutoIncrement = true
            Me.columnActorID.AllowDBNull = false
            Me.columnActorID.Unique = true
        End Sub
        
        Public Function NewActorRow() As ActorRow
            Return CType(Me.NewRow,ActorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ActorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ActorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ActorRowChangedEvent) Is Nothing) Then
                RaiseEvent ActorRowChanged(Me, New ActorRowChangeEvent(CType(e.Row,ActorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ActorRowChangingEvent) Is Nothing) Then
                RaiseEvent ActorRowChanging(Me, New ActorRowChangeEvent(CType(e.Row,ActorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ActorRowDeletedEvent) Is Nothing) Then
                RaiseEvent ActorRowDeleted(Me, New ActorRowChangeEvent(CType(e.Row,ActorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ActorRowDeletingEvent) Is Nothing) Then
                RaiseEvent ActorRowDeleting(Me, New ActorRowChangeEvent(CType(e.Row,ActorRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveActorRow(ByVal row As ActorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ActorRow
        Inherits DataRow
        
        Private tableActor As ActorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableActor = CType(Me.Table,ActorDataTable)
        End Sub
        
        Public Property ActorID As Integer
            Get
                Return CType(Me(Me.tableActor.ActorIDColumn),Integer)
            End Get
            Set
                Me(Me.tableActor.ActorIDColumn) = value
            End Set
        End Property
        
        Public Property Background As String
            Get
                Try 
                    Return CType(Me(Me.tableActor.BackgroundColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActor.BackgroundColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableActor.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActor.DOBColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tableActor.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActor.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName As String
            Get
                Try 
                    Return CType(Me(Me.tableActor.LastNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActor.LastNameColumn) = value
            End Set
        End Property
        
        Public Function IsBackgroundNull() As Boolean
            Return Me.IsNull(Me.tableActor.BackgroundColumn)
        End Function
        
        Public Sub SetBackgroundNull()
            Me(Me.tableActor.BackgroundColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableActor.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tableActor.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableActor.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tableActor.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableActor.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tableActor.LastNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ActorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ActorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ActorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ActorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DirectorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBackGround As DataColumn
        
        Private columnDirID As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnLastName As DataColumn
        
        Friend Sub New()
            MyBase.New("Director")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BackGroundColumn As DataColumn
            Get
                Return Me.columnBackGround
            End Get
        End Property
        
        Friend ReadOnly Property DirIDColumn As DataColumn
            Get
                Return Me.columnDirID
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property LastNameColumn As DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DirectorRow
            Get
                Return CType(Me.Rows(index),DirectorRow)
            End Get
        End Property
        
        Public Event DirectorRowChanged As DirectorRowChangeEventHandler
        
        Public Event DirectorRowChanging As DirectorRowChangeEventHandler
        
        Public Event DirectorRowDeleted As DirectorRowChangeEventHandler
        
        Public Event DirectorRowDeleting As DirectorRowChangeEventHandler
        
        Public Overloads Sub AddDirectorRow(ByVal row As DirectorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDirectorRow(ByVal BackGround As String, ByVal DOB As Date, ByVal FirstName As String, ByVal LastName As String) As DirectorRow
            Dim rowDirectorRow As DirectorRow = CType(Me.NewRow,DirectorRow)
            rowDirectorRow.ItemArray = New Object() {BackGround, Nothing, DOB, FirstName, LastName}
            Me.Rows.Add(rowDirectorRow)
            Return rowDirectorRow
        End Function
        
        Public Function FindByDirID(ByVal DirID As Integer) As DirectorRow
            Return CType(Me.Rows.Find(New Object() {DirID}),DirectorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DirectorDataTable = CType(MyBase.Clone,DirectorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DirectorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBackGround = Me.Columns("BackGround")
            Me.columnDirID = Me.Columns("DirID")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnLastName = Me.Columns("LastName")
        End Sub
        
        Private Sub InitClass()
            Me.columnBackGround = New DataColumn("BackGround", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBackGround)
            Me.columnDirID = New DataColumn("DirID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDirID)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New DataColumn("LastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastName)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDirID}, true))
            Me.columnDirID.AutoIncrement = true
            Me.columnDirID.AllowDBNull = false
            Me.columnDirID.Unique = true
        End Sub
        
        Public Function NewDirectorRow() As DirectorRow
            Return CType(Me.NewRow,DirectorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DirectorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DirectorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DirectorRowChangedEvent) Is Nothing) Then
                RaiseEvent DirectorRowChanged(Me, New DirectorRowChangeEvent(CType(e.Row,DirectorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DirectorRowChangingEvent) Is Nothing) Then
                RaiseEvent DirectorRowChanging(Me, New DirectorRowChangeEvent(CType(e.Row,DirectorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DirectorRowDeletedEvent) Is Nothing) Then
                RaiseEvent DirectorRowDeleted(Me, New DirectorRowChangeEvent(CType(e.Row,DirectorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DirectorRowDeletingEvent) Is Nothing) Then
                RaiseEvent DirectorRowDeleting(Me, New DirectorRowChangeEvent(CType(e.Row,DirectorRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDirectorRow(ByVal row As DirectorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DirectorRow
        Inherits DataRow
        
        Private tableDirector As DirectorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDirector = CType(Me.Table,DirectorDataTable)
        End Sub
        
        Public Property BackGround As String
            Get
                Try 
                    Return CType(Me(Me.tableDirector.BackGroundColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDirector.BackGroundColumn) = value
            End Set
        End Property
        
        Public Property DirID As Integer
            Get
                Return CType(Me(Me.tableDirector.DirIDColumn),Integer)
            End Get
            Set
                Me(Me.tableDirector.DirIDColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableDirector.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDirector.DOBColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tableDirector.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDirector.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName As String
            Get
                Try 
                    Return CType(Me(Me.tableDirector.LastNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDirector.LastNameColumn) = value
            End Set
        End Property
        
        Public Function IsBackGroundNull() As Boolean
            Return Me.IsNull(Me.tableDirector.BackGroundColumn)
        End Function
        
        Public Sub SetBackGroundNull()
            Me(Me.tableDirector.BackGroundColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableDirector.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tableDirector.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableDirector.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tableDirector.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableDirector.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tableDirector.LastNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DirectorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DirectorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DirectorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DirectorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProducerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnProdID As DataColumn
        
        Friend Sub New()
            MyBase.New("Producer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property ProdIDColumn As DataColumn
            Get
                Return Me.columnProdID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProducerRow
            Get
                Return CType(Me.Rows(index),ProducerRow)
            End Get
        End Property
        
        Public Event ProducerRowChanged As ProducerRowChangeEventHandler
        
        Public Event ProducerRowChanging As ProducerRowChangeEventHandler
        
        Public Event ProducerRowDeleted As ProducerRowChangeEventHandler
        
        Public Event ProducerRowDeleting As ProducerRowChangeEventHandler
        
        Public Overloads Sub AddProducerRow(ByVal row As ProducerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProducerRow(ByVal Name As String) As ProducerRow
            Dim rowProducerRow As ProducerRow = CType(Me.NewRow,ProducerRow)
            rowProducerRow.ItemArray = New Object() {Name, Nothing}
            Me.Rows.Add(rowProducerRow)
            Return rowProducerRow
        End Function
        
        Public Function FindByProdID(ByVal ProdID As Integer) As ProducerRow
            Return CType(Me.Rows.Find(New Object() {ProdID}),ProducerRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProducerDataTable = CType(MyBase.Clone,ProducerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProducerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnProdID = Me.Columns("ProdID")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnProdID = New DataColumn("ProdID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProdID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnProdID}, true))
            Me.columnProdID.AutoIncrement = true
            Me.columnProdID.AllowDBNull = false
            Me.columnProdID.Unique = true
        End Sub
        
        Public Function NewProducerRow() As ProducerRow
            Return CType(Me.NewRow,ProducerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProducerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProducerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProducerRowChangedEvent) Is Nothing) Then
                RaiseEvent ProducerRowChanged(Me, New ProducerRowChangeEvent(CType(e.Row,ProducerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProducerRowChangingEvent) Is Nothing) Then
                RaiseEvent ProducerRowChanging(Me, New ProducerRowChangeEvent(CType(e.Row,ProducerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProducerRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProducerRowDeleted(Me, New ProducerRowChangeEvent(CType(e.Row,ProducerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProducerRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProducerRowDeleting(Me, New ProducerRowChangeEvent(CType(e.Row,ProducerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProducerRow(ByVal row As ProducerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProducerRow
        Inherits DataRow
        
        Private tableProducer As ProducerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProducer = CType(Me.Table,ProducerDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableProducer.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProducer.NameColumn) = value
            End Set
        End Property
        
        Public Property ProdID As Integer
            Get
                Return CType(Me(Me.tableProducer.ProdIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProducer.ProdIDColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableProducer.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableProducer.NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProducerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProducerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProducerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProducerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
